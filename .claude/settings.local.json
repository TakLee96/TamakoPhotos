{
  "permissions": {
    "allow": [
      "Bash(npm install)",
      "Bash(mkdir:*)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(mongod:*)",
      "Bash(conda activate:*)",
      "Bash(pip install:*)",
      "Bash(python:*)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(tasklist)",
      "Bash(taskkill:*)",
      "Bash(C:Usersjiahaanaconda3envstensorflowpython.exe -m pip install transformers facenet-pytorch)",
      "Bash(\"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" -m pip install transformers facenet-pytorch)",
      "Bash(\"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" -c \"import torch; print(f''PyTorch version: {torch.__version__}''); print(f''CUDA available: {torch.cuda.is_available()}''); print(f''CUDA version: {torch.version.cuda}'' if torch.cuda.is_available() else ''No CUDA''); print(f''GPU count: {torch.cuda.device_count()}'' if torch.cuda.is_available() else ''No GPUs'')\")",
      "Bash(conda install:*)",
      "Bash(\"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" -c \"import torch; print(f''PyTorch version: {torch.__version__}''); print(f''CUDA available: {torch.cuda.is_available()}''); print(f''CUDA version: {torch.version.cuda}'' if torch.cuda.is_available() else ''No CUDA''); print(f''GPU count: {torch.cuda.device_count()}'' if torch.cuda.is_available() else ''No GPUs'')\")",
      "Bash(conda uninstall:*)",
      "Bash(\"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" -c \"import torch; print(f''PyTorch version: {torch.__version__}''); print(f''CUDA available: {torch.cuda.is_available()}''); print(f''CUDA version: {torch.version.cuda}'' if torch.cuda.is_available() else ''No CUDA''); print(f''GPU count: {torch.cuda.device_count()}'' if torch.cuda.is_available() else ''No GPUs'')\")",
      "Bash(KMP_DUPLICATE_LIB_OK=TRUE \"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" -c \"import torch; print(f''PyTorch version: {torch.__version__}''); print(f''CUDA available: {torch.cuda.is_available()}''); print(f''CUDA version: {torch.version.cuda}'' if torch.cuda.is_available() else ''No CUDA''); print(f''GPU count: {torch.cuda.device_count()}'' if torch.cuda.is_available() else ''No GPUs'')\")",
      "Bash(KMP_DUPLICATE_LIB_OK=TRUE PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python \"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" face_service.py)",
      "Bash(KMP_DUPLICATE_LIB_OK=TRUE npm start)",
      "Bash(KMP_DUPLICATE_LIB_OK=TRUE \"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" -c \"import torch; print(f''PyTorch version: {torch.__version__}''); print(f''CUDA available: {torch.cuda.is_available()}''); print(f''CUDA version: {torch.version.cuda}'' if torch.cuda.is_available() else ''No CUDA''); print(f''GPU count: {torch.cuda.device_count()}'' if torch.cuda.is_available() else ''No GPUs'')\")",
      "Bash(KMP_DUPLICATE_LIB_OK=TRUE \"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" test.py)",
      "Bash(KMP_DUPLICATE_LIB_OK=TRUE \"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" improved_face_test.py)",
      "Bash(\"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" -m pip list)",
      "Bash(\"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" -c \"import faiss; print(f''FAISS version: {faiss.__version__}'')\")",
      "Bash(KMP_DUPLICATE_LIB_OK=TRUE \"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" test_faiss_integration.py)",
      "Bash(KMP_DUPLICATE_LIB_OK=TRUE \"/c/Users/jiaha/anaconda3/envs/tensorflow/python.exe\" simple_faiss_test.py)",
      "Bash(call scriptsstart-services.bat)",
      "Bash(scriptsstart-services.bat)",
      "Bash(./scripts/start-services.bat)",
      "Bash(\"C:\\Users\\jiaha\\Developer\\TamakoPhotos\\scripts\\stop-services.bat\")",
      "Bash(cmd.exe //c \"C:\\Users\\jiaha\\Developer\\TamakoPhotos\\restart.bat\")",
      "Bash(ls:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(chmod:*)",
      "Bash(rm:*)",
      "Bash(sqlite3:*)",
      "Bash(npx electron-rebuild:*)",
      "Bash(git push:*)",
      "Bash(CSC_IDENTITY_AUTO_DISCOVERY=false npm run build)"
    ],
    "deny": []
  }
}